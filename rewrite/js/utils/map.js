//format: 
// {id, x, y, [1,2,3]}
// seperate array holds any scenario settings
// structured as:
// [id, {settings}] exactly as passed in to setup() method
// external method creates actual planetos out of the stored info
function mapConverter([map, scenario]){
    var out = [];
    for(var r = 0; r < map.length; r++){
        out[r] = new planeto(map[r][0], map[r][1], map[r][2], map[r][3]);
    }
    if(scenario.length > 0){
        for(var r = 0; r <scenario.length; r++){
            var targ = scenario[r][0];
            out[targ].setUp(scenario[r][1]);
        }
    }
    return out;
}
function testerMap(){
    var mapData = [[0, 30, 30, [1, 2]],
    [1, 30, 120, [0, 3]], 
    [2, 120, 30, [0, 3, 4]],
    [3, 120, 120, [1, 2, 5]],
    [4, 210, 30, [2, 5]],
    [5, 210, 120, [3, 4]]];

    var scenario = [[0, {teamId: 1, ownerId: 1, colour:"#f00", teamColour:"#f00", tChar: "A", pChar: "A", cInverse: "#0ff"}],
                    [1, {teamId: 1, ownerId: 2, colour:"#0f0", teamColour:"#f00", tChar: "A", pChar: "B", cInverse: "#f0f"}],
                    [2, {teamId: 2, ownerId: 3, colour:"#00f", teamColour:"#00f", tChar: "B", pChar: "C", cInverse: "#ff0"}],
                    [3, {teamId: 2, ownerId: 4, colour:"#ff0", teamColour:"#00f", tChar: "B", pChar: "D", cInverse: "#00f", hasShield: true}],
                    [4, {teamId: 3, ownerId: 5, colour:"#f0f", teamColour:"#0f0", tChar: "C", pChar: "E", cInverse: "#0f0"}]];

    return [mapData, scenario];
}
function praiseJibbers(){
	var mapData = [[0, 120, 22.5,[1, 2]],
    [1, 210, 15,[0, 2, 3]],
    [2, 180, 75,[0, 1, 3, 7]],
    [3, 277.5, 52.5,[1, 2, 4]], 
    [4, 337.5, 90,[3, 7, 8, 11]], 
    [5, 105, 165,[6, 9]], 
    [6, 202.5, 157.5,[5, 7, 9, 10]],
    [7, 270, 120,[2, 4, 6, 10]],
    [8, 435, 112.5,[4, 11, 12, 13]], 
    [9, 165, 210,[5, 6, 10]],
    [10, 240, 210,[6, 7, 9, 11]],
    [11, 315, 172.5,[4, 8, 10, 12]],
    [12, 412.5, 187.5,[8, 11, 13, 14]],
    [13, 510, 180,[8, 12, 14, 15]],
    [14, 472.5, 255,[12, 13, 15, 20, 21]], 
    [15, 577.5, 244.5,[13, 14, 21]],
    [16, 97.5, 375,[17]], 
    [17, 195, 397.5,[16, 18]],
    [18, 285, 375,[17, 19, 28, 38, 39]],
    [19, 352.5, 322.5,[18, 20, 28]],
    [20, 442.5, 315,[14, 19, 21, 28, 29]], 
    [21, 562.5, 322.5,[14, 15, 20, 22, 29, 30]],
    [22, 675, 345,[21, 30, 31]],
    [23, 795, 337.5,[31, 32, 33]],
    [24, 960, 337.5,[33, 34, 35]],
    [25, 1087.5, 292.5,[26, 27, 35, 36]],
    [26, 1155, 232.5,[25, 27]], 
    [27, 1200, 307.5,[25, 26, 36, 37]],
    [28, 412.5, 390,[18, 19, 20, 29, 39, 40]],
    [29, 510, 397.5,[20, 21, 28, 30, 40, 41]],
    [30, 607.5, 397.5,[21, 22, 29, 41, 42, 43]],
    [31, 735, 390,[22, 23, 32, 43, 57]],
    [32, 795, 420,[23, 31, 33, 44]],
    [33, 877.5, 405,[23, 24, 32, 34, 45]], 
    [34, 960, 420,[24, 33, 35, 46]], 
    [35, 1027.5, 405,[24, 25, 34, 36, 47, 48]],
    [36, 1117.5, 367.5,[25, 27, 35, 37]],
    [37, 1177.5, 390,[27, 36, 48, 49]], 
    [38, 277.5, 472.5,[18, 39, 52]], 
    [39, 367.5, 465,[18, 28, 38, 53]], 
    [40, 450, 450,[28, 29, 41, 53]], 
    [41, 525, 495,[29, 30, 40, 42, 54, 55]],
    [42, 615, 487.5,[30, 41, 55, 56]],
    [43, 675, 442.5,[30, 31, 56]],
    [44, 795, 510,[32, 45, 57, 58]],
    [45, 877.5, 525,[33, 44, 46, 58, 59]],
    [46, 960, 502.5,[34, 45, 47, 59]], 
    [47, 1027.5, 510,[35, 46, 48, 59, 60, 61]],
    [48, 1110, 450,[35, 37, 47, 49]],
    [49, 1170, 495,[37, 48, 61, 62]], 
    [50, 120, 592.5,[51]], 
    [51, 210, 577.5,[50, 52]], 
    [52, 300, 562.5,[38, 51, 53, 63]],
    [53, 412.5, 510,[39, 40, 52, 54, 63]], 
    [54, 472.5, 562.5,[41, 53, 55, 63, 64]], 
    [55, 577.5, 555,[41, 42, 54, 56, 64, 65]],
    [56, 675, 517.5,[42, 43, 55, 57, 66]], 
    [57, 735, 540,[31, 44, 56, 58, 66]], 
    [58, 795, 600,[44, 45, 57]], 
    [59, 960, 600,[45, 46, 47]], 
    [60, 1072.5, 607.5,[47, 61, 62, 67]], 
    [61, 1102.5, 540,[47, 49, 60, 62]], 
    [62, 1185, 577.5,[49, 60, 61, 67]], 
    [63, 375, 615,[52, 53, 54, 64]], 
    [64, 480, 637.5,[54, 55, 63, 65, 68, 69]],
    [65, 570, 622.5,[55, 64, 66, 69]],
    [66, 667.5, 600,[56, 57, 65]], 
    [67, 1147.5, 660,[60, 62]], 
    [68, 465, 712.5,[64, 69, 74, 75]], 
    [69, 577.5, 697.5,[64, 65, 68, 75]],
    [70, 82.5, 712.5,[71, 76]], 
    [71, 172.5, 735,[70, 72, 76, 77]], 
    [72, 232.5, 787.5,[71, 73, 77]], 
    [73, 315, 802.5,[72, 74, 78, 79]], 
    [74, 397.5, 772.5,[68, 73, 75, 79, 80]], 
    [75, 502.5, 780,[68, 69, 74, 80]], 
    [76, 120, 772.5,[70, 71, 77]],
    [77, 187.5, 825,[71, 72, 76, 78, 81]], 
    [78, 270, 855,[73, 77, 79, 83]], 
    [79, 382.5, 847.5,[73, 74, 78, 80]], 
    [80, 450, 832.5,[74, 75, 79]],
    [81, 142.5, 877.5,[77, 82, 83, 84]], 
    [82, 75, 915,[81, 84]], 
    [83, 202.5, 907.5,[78, 81, 84]], 
    [84, 135, 952.5,[81, 82, 83]]];

    var scenario = [];

	return [mapData, scenario];
}